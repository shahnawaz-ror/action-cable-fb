c
data.present?
data
c
data
c
data
c
data
c
controllers
assigns
class
params
c
assigns
data
params
c
Notification.all.count
Notification.all
 Notification.find_each.count
c
 Vacancy
   23:       end
   22:         add vacancy_path(vacancy), :lastmod => vacancy.updated_at, :priority => 0.5
Vacancy.find_each do |vacancy|
c
 @@scheduler.running_jobs.present?
@@scheduler.stop
@@scheduler.methods
@@scheduler.kill_all
@@scheduler.kill
 @@scheduler.running_jobs.present?
 @@scheduler.running_jobs
 @@scheduler.running_jobs?
 @@scheduler.running_jobs.kill
 @@scheduler.running_jobs
 @@scheduler.running_jobs?
 @@scheduler.running?
 @@scheduler
 @@scheduler.
c
 @@schedulerc
 @@scheduler
 sleep 3
c
@@scheduler.jobs
@@scheduler.jobs.first.kill
@@scheduler.jobs.first
@@scheduler.jobs.all.kill
@@scheduler.jobs.kill
@@scheduler.jobs
@@scheduler
@@
c
@@job.active?
@@job.active
@@job
sleep 2
c
Rufus::Scheduler.kill
Rufus::Scheduler.methods
Rufus::Scheduler.jobs
Rufus::Scheduler.all
Rufus::Scheduler
    scheduler.methods
    scheduler
    scheduler.job(@job).kill?
    scheduler.job(@job).kill
    scheduler.job(@job)
    scheduler.job.last
    scheduler.job
    scheduler.jobs
    scheduler.joblast
    scheduler.job(@@job)
    scheduler = Rufus::Scheduler.new
@@job
c
notification_path(@notification)
@notification.methods
@notification.url
@notification_path
@notification
c
@notification
c
params[:account_id].present?
params
c
request.url
reuest.url
request.base_url
request
c
params
@notification
c
@notification
notification.update(status: 1)
notification = Notification.find_by_id(params["id"])
    data = Notification.find_by_id(params["id"])
params
c
data
data.status ? data = "shown" : data = "not shown"
data.status = false
data = Notification.find_by_id(params["id"])
data
data.status = false
data.status ? data = "shown" : data = "not shown"
data.status
data = Notification.find_by_id(params["id"])
data.status
Notification.find_by_id(params["id"])
data
c
Notification.find_by_id(params["id"])
Notification.find_by_id(params["id"]).status
Notification.find_by_id(params["id"])
Notification.find_by_id
params["id"]
params[""id]
params
c
params
c
params
c
time_ago_in_words
include ActionView::Helpers::DateHelper
time_ago_in_words
time_ago_in_words(@notification.created_at)
@notification.created_at
@notification
c
exit
@student.save
@student
 @student = current_user.students.new(student_params)
@student
current_user.students.new(student_params)
c
current_user.students.new(student_params)
current_user.students
current_user
c
current_user.student.build(student_params)
current_user.students.new(student_params)
current_user.student.new(student_params)
current_user.student
current_user.students
current_user
student_params
@student
c
ActionCable.server.broadcast.web_notifications_channel(:message => "d")
ActionCable.server.broadcast.web_notifications_channel
ActionCable.server.broadcast.methods
ActionCable.server.broadcast_to(@post, @comment)
CommentsChannel.broadcast_to(@post, @comment)
message: ‘<p>Hello World!</p>’
ActionCable.server.broadcast ‘web_notifications_channel’,
ActionCable.server.broadcast ‘web_notifications_channel’
